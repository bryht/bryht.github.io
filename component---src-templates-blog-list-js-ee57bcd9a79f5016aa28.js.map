{"version":3,"sources":["webpack:///./src/templates/blog-list.js"],"names":["BlogList","getBlogList","data","this","props","posts","articlesFromLocal","allMarkdownRemark","edges","articlesFromRss","allFeedRss","forEach","node","push","id","fields","slug","link","title","frontmatter","description","date","img","childImageSharp","fluid","src","type","internal","content","encodedSnippet","substring","pubDate","sort","a","b","Date","parse","render","className","map","element","key","target","to","style","backgroundImage","textDecoration","color","toLocaleString","React","Component","pageQuery"],"mappings":"yMAIMA,E,0GACJC,YAAA,WAAe,IACLC,EAASC,KAAKC,MAAdF,KACJG,EAAQ,GACNC,EAAoBJ,EAAKK,kBAAkBC,MAC3CC,EAAkBP,EAAKQ,WAAWF,MAuBxC,OAtBAF,EAAkBK,SAAQ,YAAe,IAAZC,EAAW,EAAXA,KAC3BP,EAAMQ,KAAK,CACTC,GAAIF,EAAKG,OAAOC,KAChBC,KAAML,EAAKG,OAAOC,KAClBE,MAAON,EAAKO,YAAYD,MACxBE,YAAaR,EAAKO,YAAYC,YAC9BC,KAAMT,EAAKO,YAAYE,KACvBC,IAAKV,EAAKO,YAAYG,KAAOV,EAAKO,YAAYG,IAAIC,gBAAgBC,MAAMC,IACxEC,KAAMd,EAAKe,SAASD,UAGxBjB,EAAgBE,SAAQ,YAAe,IAAZC,EAAW,EAAXA,KACzBP,EAAMQ,KAAK,CACTC,GAAIF,EAAKE,GACTG,KAAML,EAAKK,KACXC,MAAON,EAAKM,MACZE,YAAaR,EAAKgB,QAAQC,eAAeC,UAAU,EAAG,KAAK,MAC3DT,KAAMT,EAAKmB,QACXT,IAAK,KACLI,KAAMd,EAAKe,SAASD,UAGjBrB,EAAM2B,MAAK,SAACC,EAAGC,GAAJ,OAAUC,KAAKC,MAAMF,EAAEb,MAAQc,KAAKC,MAAMH,EAAEZ,U,EAEhEgB,OAAA,WACE,IAAMhC,EAAQF,KAAKF,cACnB,OACE,kBAAC,IAAD,KACE,yBAAKqC,UAAU,wBACZjC,EAAMkC,KAAI,SAAAC,GACT,OACE,6BAASF,UAAU,OAAOG,IAAKD,EAAQ1B,IACpC0B,EAAQlB,KAEL,kBAAC,IAAD,CACEoB,OAAO,SACPC,GAAIH,EAAQvB,KACZqB,UAAU,iBACVM,MAAO,CACLC,gBAAgB,OAAQL,EAAQlB,IAAjB,OAIvB,yBAAKgB,UAAU,gBACb,wBAAIA,UAAU,cACZ,kBAAC,IAAD,CACEI,OAAO,SACPC,GAAIH,EAAQvB,MAEXuB,EAAQtB,QAGb,2BACE,kBAAC,IAAD,CACEwB,OAAO,SACPE,MAAO,CACLE,eAAgB,OAChBC,MAAO,WAETJ,GAAIH,EAAQvB,MAEXuB,EAAQpB,cAGb,0BAAMkB,UAAU,aACb,IAAIH,KAAKK,EAAQnB,MAAM2B,0B,GAvErBC,IAAMC,WAmFdlD,YAER,IAAMmD,EAAS","file":"component---src-templates-blog-list-js-ee57bcd9a79f5016aa28.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport DefaultLayout from '../components/layout'\nclass BlogList extends React.Component {\n  getBlogList() {\n    const { data } = this.props\n    let posts = [];\n    const articlesFromLocal = data.allMarkdownRemark.edges;\n    const articlesFromRss = data.allFeedRss.edges;\n    articlesFromLocal.forEach(({ node }) => {\n      posts.push({\n        id: node.fields.slug,\n        link: node.fields.slug,\n        title: node.frontmatter.title,\n        description: node.frontmatter.description,\n        date: node.frontmatter.date,\n        img: node.frontmatter.img && node.frontmatter.img.childImageSharp.fluid.src,\n        type: node.internal.type\n      })\n    });\n    articlesFromRss.forEach(({ node }) => {\n      posts.push({\n        id: node.id,\n        link: node.link,\n        title: node.title,\n        description: node.content.encodedSnippet.substring(0, 100)+\"...\",\n        date: node.pubDate,\n        img: null,\n        type: node.internal.type,\n      })\n    });\n    return posts.sort((a, b) => Date.parse(b.date) - Date.parse(a.date));\n  }\n  render() {\n    const posts = this.getBlogList();\n    return (\n      <DefaultLayout>\n        <div className=\"content-box clearfix\">\n          {posts.map(element => {\n            return (\n              <article className=\"post\" key={element.id}>\n                {element.img &&\n                  (\n                    <Link\n                      target=\"_blank\"\n                      to={element.link}\n                      className=\"post-thumbnail\"\n                      style={{\n                        backgroundImage: `url(${element.img})`,\n                      }}\n                    />\n                  )}\n                <div className=\"post-content\">\n                  <h2 className=\"post-title\">\n                    <Link\n                      target=\"_blank\"\n                      to={element.link}\n                    >\n                      {element.title}\n                    </Link>\n                  </h2>\n                  <p>\n                    <Link\n                      target=\"_blank\"\n                      style={{\n                        textDecoration: 'none',\n                        color: '#000000',\n                      }}\n                      to={element.link}\n                    >\n                      {element.description}\n                    </Link>\n                  </p>\n                  <span className=\"post-date\">\n                    {new Date(element.date).toLocaleString()}\n                  </span>\n                </div>\n              </article>\n            )\n          })}\n        </div>\n      </DefaultLayout>\n    )\n  }\n}\n\nexport default BlogList\n\nexport const pageQuery = graphql`\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          description\n          date\n          img {\n            childImageSharp {\n              fluid(maxWidth: 3720) {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcSet\n              }\n            }\n          }\n        }\n        internal {\n          type\n        }\n      }\n    }\n  }\n  allFeedRss {\n    edges {\n      node {\n        id\n        title\n        pubDate\n        link\n        content {\n          encodedSnippet\n        }\n        internal {\n          type\n        }\n      }\n    }\n  }\n}\n`"],"sourceRoot":""}